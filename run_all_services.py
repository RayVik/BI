import os
import subprocess
from pathlib import Path

def find_docker_compose_files(directory):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã docker-compose.yaml —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–±–µ–∑ –ø–æ–¥–ø–∞–ø–æ–∫)."""
    compose_files = []
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–Ω–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
    target_path = Path(directory)
    if (target_path / "docker-compose.yaml").exists():
        compose_files.append(target_path / "docker-compose.yaml")
    return compose_files

def run_services(compose_files):
    """–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ—Ç, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ docker-compose —Ñ–∞–π–ª–æ–≤."""
    for file in compose_files:
        print(f"üî® –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {file}")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º build
            subprocess.run(
                ["docker-compose", "-f", str(file), "build"],
                check=True,
            )
            print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {file}")
            # –ó–∞—Ç–µ–º up
            subprocess.run(
                ["docker-compose", "-f", str(file), "up", "-d"],
                check=True,
            )
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file}: {e}")
        except FileNotFoundError:
            print("‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∏ docker-compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

if __name__ == "__main__":
    DIRs = ['.', "DAGs/LTV", 'budibase/hosting']
    for DIR in DIRs:
        compose_files = find_docker_compose_files(DIR)
        if not compose_files:
            print(f"‚ö†Ô∏è –í –ø–∞–ø–∫–µ {DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ docker-compose.yaml —Ñ–∞–π–ª–æ–≤.")
        else:
            print(f"üîç –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: {[str(f) for f in compose_files]} –≤ –ø–∞–ø–∫–µ {DIR}")
            run_services(compose_files)